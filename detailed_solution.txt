## Software Framework
1. We used IBM Cloud Annotations to train a model to identify lit kitchen hobs in kitchens. Required service connections to other IBM Services such as IBM Watson Machine Learning instance and IBM Cloud Object Storage.
2. After downloading the model from IBM Cloud Annotations, the model is used in a Python script(python-tflite.py) to classify images taken by a camera. The photo will be taken by external cameras every 1 minute at many location and it will be uploaded to a specific directory for the python script to compare against the model, as "location_ID.jpg", where ID is an integer to identify the location.
3. After comparing against the model, the script will save the photo annotated with detection frame in a location_ID.png image file as well as a status_ID.txt file to indicate whether fire is detected.
4. Next, another Python script(cloud.py) handles the upload of the images and data to Firebase Cloud Storage.
5. Our frontend will be a Web UI based on Python Django, although it is not implemented yet. We will use a simple .HTML to represent our Web UI.
6. A Python script from the UI machine(retrieve.py) will handle the downloading of data from Firebase Cloud Storage, which will then be displayed via the Web UI if the status shows that there is fire. Else, the Web UI will show a green tick corresponding to the location.
7. We intend to utilise the network of CCTV and other small cameras placed in strategic/critical locations to monitor areas, and the Web UI will provide real-time updates on each camera.

## Hardware Architecture
1. All CCTVs and other cameras will be connected to a indepedent machine using a small plugin device (such as Raspberry Pi). Each device will control it's own camera and upload the files independently to Firebase.
2. A seperate machine will then act as the central server and connect to the Internet to access Firebase.
3. The machine acting as central server will serve the .HTML UI as well as retrieving files from Firebase to server. 